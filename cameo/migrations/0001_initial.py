# Generated by Django 3.0.6 on 2021-04-09 20:17

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import jsonfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cameo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_celebrity', models.BooleanField(default=False)),
                ('category', models.CharField(choices=[('Actors', 'actors'), ('Activists', 'activist'), ('Artists', 'artists'), ('Astrologers', 'astrologers'), ('Astronauts', 'astronauts'), ('Athletes', 'athletes'), ('Authors', 'authors'), ('Cameo Team', 'cameo_team'), ('Comedian', 'comedians'), ('Commentators', 'commentators'), ('Creator', 'creator'), ('Dancers', 'dancers'), ('En Español', 'en_español'), ('Food', 'food'), ('Furry', 'furry'), ('High Fashion', 'high_fashion'), ('Home and Design', 'home_and_design'), ('Impressionists', 'impressionists'), ('Magicians', 'magicians'), ('Model', 'model'), ('Motivational Speakers', 'motivational_speakers'), ('Musician', 'musician'), ('News', 'news'), ('Pageants', 'pageants'), ('Photographers', 'photographers'), ('Podcast', 'podcast'), ('Poker', 'poker'), ('Politics', 'politics'), ('Radio', 'radio'), ('Reality TV', 'reality_tv'), ('Royals', 'Royals'), ('Santas', 'santas'), ('Sports Commentator', 'sports_Commentator'), ('Stylists', 'stylists'), ('TV Hosts', 'tv_hosts'), ('Tarot Card Reader', 'tarot_card_reader'), ('Venture Capitalists', 'venture_capitalists'), ('Viral', 'viral'), ('Radio', 'radio'), ('Writers', 'writers')], max_length=100, null=True)),
                ('delivery_duration', models.IntegerField(null=True)),
                ('delivery_duration_unit', models.CharField(choices=[('Hr', 'hr'), ('Day', 'day'), ('Week', 'week')], max_length=10, null=True)),
                ('image', models.ImageField(upload_to='cameo')),
                ('paypal_email', models.EmailField(max_length=254, null=True)),
                ('reviews', jsonfield.fields.JSONField()),
                ('fans', jsonfield.fields.JSONField()),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
